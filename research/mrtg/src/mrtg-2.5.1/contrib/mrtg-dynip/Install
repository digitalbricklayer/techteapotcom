Installation of the dynIP-mrtg contribution to mrtg

This contribution to mrtg runs independently of an existing running mrtg
installation.

Only one file is necessary, mrtg-dynip or mrtg-dynip-d file (the former has
more comments).  It is necessary to have mrtg successfully installed first
and to have an snmp daemon, the snmp agent server, running on the target
machine.  See the FAQ for information on obtaining mrtg-dynip and MRTG

Information on configuring the 12 scaler constants is included below.  This
information is included again for convenience in mrtg-dynip.

Ensure mrtg-dynip has executable permission (for example, run command chmod
744 mrtg-dynip) and can write to directories files it is configured to write
to.

There are 13 configuration items, 12 are simple scaler constant assingments
and one is a multiline or 'hereto' scaler constant assingment.  Three of the
constants must be set Following the commented example will make the set up
clear.
 
  1   $HTTP_Work_Dir         ** Must set
  2   $HTTP_index_file       Default index.html may be OK if unique
  3   $mrtg_Dir              ** Must set
  4   $mrtgcfg_Dir           Default may be OK, set to $mrtgDir
  5   $mrtgcfg_file          Default mrtg-dynip.cfg OK, if single copy running
  6   $update		     Default will work (five minutes)
  7   $community_default     Default for this default may be OK (public)
  8   $email		     Default setting is not to display
  9   $home_page	     Default setting is not to code
 10   $home_page_descr       Default setting is not to display
 11   $suicidal              Default will work, if everything else works!
 12   $firewall_masq_tran_if Default will work, except for some firewalls
 13   $interface             ** Must set

Ensure mrtg-dynip (and copies to use to use snmp information from more 
than one machine) have executable permission.  See paragraph below as 
to where mrtg-dynip (and copies) may need to be installed.

Place a crontab entry, consistent with update time, similar to
0,5,10,15,20,25,30,35,40,45,50,55 * * * *  <next line continued here> 
cd /usr/src/mrtg/mrtg-2.4.1/; date >>/var/log/mrtg-dynip.log;
<continues previous line> ./mrtg-dynip >>/var/log/mrtg-dynip.log 2>&1

Redirecting standard output and error to a log file with an indication
of time from 'date' is valuable for sorting out errors and preventing
messages from being emailed to the root account.

If Perl5 snmp modules are not installed in standard libraries and 
the internal 'walk' is being used, then it is necessary to ensure
mrtg-dynip in installed in, and run from, a directory where the modules
are, typically the same directory the mrtg executable is in.  If there
is more than one 'mrtg-dynip' executable, (for incostinent snmp community
names) they can be added to the crontab entry in an appropriate manner,
such as:
cd /path/; date >> /var/log/md1; ./mrtg-dynip1 >>/var/log/md1 2>&1; 
<line continued> date >>/var/log/md2; ./mrtg-dynip2 >>/var/log/md2 2>&1
or have entries placed in an executable script and have script file
executed from crontab

The most difficult part in a dynamic IP environment may be choosing the IP
addresses to use for the scaler constant $interfaces, as you must ensure
the IP address used will always correspond to the physical interface
device.

For Internet Service Providers running ppp dial in lines, the choice will
be clear.  The IP addressess to use will be the 'remote' IP part of the
command line options for the real physical device (:remote_ip in
/etc/ppp/options.ttyXY file).  For dial out lines that can get a variable
'remote' IP, you should be able to control what remote IP you get,
no matter who you dial into and what remote IP they may offer you, 
by configuring a remote IP as for a dial in line above.
If the final negotiated ppp address pair as seen by your machine,
local_ip:remote_ip, is equal to a_ip:b_ip, then the local_ip:remote_ip as
seen by the other machine is b_ip:a_ip. Since the remote IP seen by your
side of the line is the local IP as seen and negotiated by the machine on
the other side of the line, you can choose whatever remote IP address suits
your side of the connection.  Specifying a 'remote' IP other than 0.0.0.0
will, by default with pppd, result in an IP the other machine will have to
accept as their local to succesfully negotiate a connection.  However it is
two way: the other machine can do the same to you for its corresponding
'remote' IP.  Hence mrtg-dynip can work on both machines.
Please note: If you have interface devices which register ppp10 or 
above, your snmp daemon may not supply information.  This is not due 
to a bug in mrtg, the snmp modules or this mrtg-dynip.

Latest version of this software should be available from
http://www.heenan.ironbark.id.au/source/mrtg-dynip

######## Start of configuration section, numbered 1 to 12.

######## Set this, 1
Define $WorkDir to be the directory for web pages and data to be housed
Ensure each directory path ends with a seperator. If intending to run on 
an NT machine, then ensure the directory seperator is '\\' instead of '/'
$HTTP_Work_Dir='/var/lib/httpd/htdocs/mrtg/';

#######  Set this, 2
Define name of index html file, only condition is that it not the same name
as a html that will be regenerated.  All names of generated files contain
an IP address.
$HTTP_index_file='index.html';

###### Set this, 3
Set to full directory path the mrtg executable is in.  Place this file
it if that is where the Perl 5 snmp modules are and $use_internal_walk
will not be set to 1 (see below).
Ensure each directory path ends with a seperator. If intending to run on
an NT machine, then ensure the directory seperator is '\\' instead of '/'
$mrtg_Dir="/usr/src/mrtg/mrtg-2.4.1/";

###### Set this, 4
Set to full directory path the 'mrtg.cfg' file below is to be placed in.
The default choice is to choose same directory as for $mrtg_Dir above
Ensure each directory path ends with a seperator. If intending to run on
an NT machine, then ensure the directory seperator is '\\' instead of '/'
##$mrtgcfg_Dir="/usr/src/mrtg/mrtg-2.4.1/";
$mrtgcfg_Dir=$mrtg_Dir;

###### Set this, 5
Set the name you would like the 'mrtg.cfg' file to be.  By locating or
naming differently from existing 'mrtg.cfg' files, you can run this
software independently of your existing mrtg installation.
$mrtgcfg_file="mrtg-dynip.cfg";

###### Set this, 6
Set this to update interval in amount of minutes.  Ensure when this file
is run from crond and that the cron run inteval matches this update 
interval
$update=5;

####### Set this, 7
Default community "public" may be sufficient. The community defined here
is the default community to use if no community is defined in the
for a particular interface in configuration of $interface in section 12.
$community_default="public";

####### Set this, 8
Email address of network manager(s).  Ensure a '\' appears before
'@' in email address, as in example.
$email="";         #No attempt to display if null
#$email="admin\@our_org.com";

####### Set this, 9
Web address of home page for your system, do not include http:// at start
$home_page="";  	#No attempt to display if null   
#$home_page="www.our_org.com";

####### Set this, 10         
Text for clickable link to home page of your system
$home_page_descr="";  	#No attempt to display if null    
#$home_page_descr="Our home page";

####### Set this, 11
Set to a non zero if you want the program to die if there are problems
with responses from agents or hosts. Useful in testing phase.
#$suicidal = 0; #Program is to soldier on if there are no responses from a host
$suicidal = 1; #Program is to bomb out if there are problems with reponses

####### Set this, 12
Set this to a non zero if you have interfaces with the same IP number on
different masquerading firewall, or address translation, routers/hosts,
otherwise leave as 0.  This adds the name of the host to all web page file
names as well as the IP addresses.  Avoid using this option as its use make
it more difficult to keep track of interface data. 
#$firewall_masq_tran_if = 1;
$firewall_masq_tran_if = 0;

####### Set this, 13
A pair of lines between blank lines represents an interface on a 
particular host.  

You can comment out a single pair of lines with a '#' or any non digit
(except whitespace) as the first character of a pair of lines.

The first line has the following format
'n' 'IP-addr' 'if-speed' 'snmp host' 'snmp community'

The second line has the following format
	'Any free text description of interface'
 
The items must not be enclosed by '"' or '''.  Plese see example
below before reading any further. Any whitespace or combination
of whitespace (tabs or spaces) can seperate the items. However it
is important the two lines with 'END_OF_INTERFACES' end without
whitespace. 

'n' is place this entry is to appear in the index of interfaces web file.
The number of digits should be the same for each interface, for example
use sequence 000 010 020 for successive numbers. You can temporarily
take an interface out of consideration by placing any non digit 
(except whitespace) before these digits, for example replace 010 
by N010 or #010

'IP-addr' is a consistent IP address of a physical interface.

'if-speed' is the interface speed in integer bits/sec. K and M multipliers
for Kb/s and Mb/s can be used (see example). If you want to use decimal
values then rewrite with a lower multiplier, for example write 
33.3K as  34099 (integer portion of 33.3 multiplied by 1024).

'snmp host' is a common and consistent DNS name, or IP address, for
interfaces that belong to a particular machine.  For efficiency of snmp
agent use it is better all interfaces that belong to a particular machine
use a consistent name.

'snmp community' is the community name of the 'public' community
for an interface (the public community does not have to be named 
'public').  This vale does not have to be set: if this value is 
not set then the value of $community_default is used instead.

'Any free text description of the interface ' on the second line
is as indicated.  It need not begin with whitepace (tabs or spaces).

For dynamic IP interfaces, you must use unvarying 'remote' IPs as indicated
above.  Virtual interface devices should not be used, they provide the same
statistics as the real interface they are a virtual interface of.

Example (all comment symbols '#' must be removed for real use)

{
$interfaces = <<END_OF_INTERFACES

010	192.168.2.1  	10M	localhost	public
	Ethernet interface 12.168.2.1

020	192.168.2.5	33K	localhost	public
	Dial in PPP link 192.168.2.5

030	192.168.2.7	34099	localhost	
	Masquerade dial out ppp link 192.168.2.7

END_OF_INTERFACES
}

