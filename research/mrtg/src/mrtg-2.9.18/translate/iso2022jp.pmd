###### PATCHTAG00 ####################################################
###      iso-2022-jp
###      => Fuminori Uematsu <uematsu@kgz.com>
###### PATCHTAG10 ####################################################
  &iso2022jp
###### PATCHTAG20 ####################################################
  'iso2022jp'    => \&iso2022jp,
  'iso-2022-jp'  => \&iso2022jp, 
###### PATCHTAG30 ####################################################
# iso2022jp/iso-2022-jp
   'iso2022jp' =>
   "  <HR>
  <FONT SIZE=2>\e\$BF|K\\8lLu\e(B(ISO-2022-JP)\e\$B:n\@.\e(B
  <A HREF=\"http://www.kgz.com/~uematsu/\">\e\$B?\">>\e(B \e\$BJ8FA\e(B</A>
  <A HREF=\"mailto:uematsu\@kgz.com\">&lt;uematsu\@kgz.com&gt;</A></FONT>
",
###### PATCHTAG40 ####################################################
$credits::LOCALE{'iso-2022-jp'}=$credits::LOCALE{'iso2022jp'};
###### PATCHTAG50 ####################################################
# iso2022jp

sub iso2022jp
{
  my $string = shift;
return "" unless defined $string;
  my(%translations,%month,%wday);

  my($i,$j);
  my(@dollar,@quux,@foo);

  
  # regexp => replacement string NOTE does not use autovars $1,$2...
  # charset=iso-2022-jp

  %translations =
  (  
     'charset=iso-8859-1'                     => 'charset=iso-2022-jp',
     'Maximal 5 Minute Incoming Traffic'      => "\033\$B:GBg<u?.NL\033(B(5\033\$BJ,4VJ?6Q\033(B)",
     'Maximal 5 Minute Outgoing Traffic'      => "\033\$B:GBgAw?.NL\033(B(5\033\$BJ,4VJ?6Q\033(B)",
     'the device'                             => "\033\$B%G%P%\$%9\033(B",
     'The statistics were last updated(.*)'   => "\033\$B:G=*99?7F|;~\033(B\$1",
     ' Average\)</B><BR>'                     => "\033\$BJ?6Q\033\(B)</B><BR>",
     '<TD ALIGN=right><SMALL>Average(.*)'     => "<TD ALIGN=right><SMALL>\033\$BJ?6QCM\033(B\$1",
     '<TD ALIGN=right><SMALL>Max(.*)'         => "<TD ALIGN=right><SMALL>\033\$B:GBgCM\033(B\$1",
     '<TD ALIGN=right><SMALL>Current(.*)'     => "<TD ALIGN=right><SMALL>\033\$B8=:_CM\033(B\$1",
     'version'                                => 'version',
     '<B>`Daily\' Graph \((.*) Minute'        => "<B>\033\$B0lF|%0%i%U\033(B(\$1\033\$BJ,4V\033(B",
     '<B>`Weekly\' Graph \(30 Minute'         => "<B>\033\$B=54V%0%i%U\033(B(30\033\$BJ,4V\033(B",
     '<B>`Monthly\' Graph \(2 Hour'           => "<B>\033\$B7n4V%0%i%U\033(B(2\033\$B;~4V\033(B",
     '<B>`Yearly\' Graph \(1 Day'             => "<B>\033\$BG/4V%0%i%U\033(B(1\033\$BF|\033(B",
     'Incoming Traffic in (\S+) per Second'   => "\033\$B<u?.NL\033(B(\$1/\033\$BIC\033(B)",
     'Outgoing Traffic in (\S+) per Second'   => "\033\$BAw?.NL\033(B(\$1/\033\$BIC\033(B)",
     'at which time (.*) had been up for(.*)' => "\$1\033\$B\$N2TF/;~4V\033(B\$2",
     '([kMG]?)([bB])/s'                       => "\$1\$2/\033\$BIC\033(B",
     '([kMG]?)([bB])/min'                     => "\$1\$2/\033\$BJ,\033(B",
     '([kMG]?)([bB])/h'                       => "\$1\$2/\033\$B;~4V\033(B",
     'Bits'                                   => "\033\$B%S%C%H\033(B",
     'Bytes'                                  => "\033\$B%P%\$%H\033(B",
     '&nbsp;In:</FONT>'                       => "&nbsp;\033\$B<u?.\033(B:</FONT>",
     '&nbsp;Out:</FONT>'                      => "&nbsp;\033\$BAw?.\033(B:</FONT>",
     '&nbsp;Percentage</FONT>'                => "&nbsp;\033\$B3d9g\033(B:</FONT>",
     'Ported to OpenVMS Alpha by'             => "OpenVMS Alpha\033\$BHG:n\@.\033(B",
     'Ported to WindowsNT by'                 => "WindowsNT\033\$BHG:n\@.\033(B",
     'and'                                    => 'and',
     '^GREEN'                                 => "\033\$BNP\033(B",
     'BLUE'                                   => "\033\$B\@D\033(B",
     'DARK GREEN'                             => "\033\$B0E\$\$NP\033(B",
     'MAGENTA'                                => "\033\$B%^%<%s%?\033(B",
     'AMBER'                                  => "\033\$B2+?'\033(B"
  );

# maybe expansions with replacement of whitespace would be more appropriate

foreach $i (keys %translations)
{  
  my $trans = $translations{$i};
  $trans =~ s/\|/\|/;  
  return $string if eval " \$string =~ s|\${i}|${trans}| ";
};

%wday = 
    (
      'Sunday'    => "(\033\$BF|\033(B)", #'Sun' => 'Sun',
      'Monday'    => "(\033\$B7n\033(B)", #'Mon' => 'Mon',
      'Tuesday'   => "(\033\$B2P\033(B)", #'Tue' => 'Tue',
      'Wednesday' => "(\033\$B?e\033(B)", #'Wed' => 'Wed',
      'Thursday'  => "(\033\$BLZ\033(B)", #'Thu' => 'Thu',
      'Friday'    => "(\033\$B6b\033(B)", #'Fri' => 'Fri',
      'Saturday'  => "(\033\$BEZ\033(B)", #'Sat' => 'Sat' 
    );

%month = 
    (
      'January'   => "1\033\$B7n\033(B",    'February' => "2\033\$B7n\033(B",
      'March'     => "3\033\$B7n\033(B",    'April'    => "4\033\$B7n\033(B",
      'May'       => "5\033\$B7n\033(B",    'June'     => "6\033\$B7n\033(B", 
      'July'      => "7\033\$B7n\033(B",    'August'   => "8\033\$B7n\033(B",
      'September' => "9\033\$B7n\033(B",    'October'  => "10\033\$B7n\033(B",
      'November'  => "11\033\$B7n\033(B",   'December' => "12\033\$B7n\033(B",
#     'Jan'   => 'Jan',    'Feb'     => 'Feb',     'Mar'    => 'Mar',
#     'Apr'   => 'Apr',    'May'     => 'May',     'Jun'    => 'Jun',
#     'Jul'   => 'Jul',    'Aug'     => 'Aug',     'Sep'    => 'Sep', 
#     'Oct'   => 'Oct',    'Nov'     => 'Nov',     'Dec'    => 'Dec' 
    );

  @foo=($string=~/(\S+),\s+(\S+)\s+(\S+) (.*)/);
  if($foo[0] && $wday{$foo[0]} && $foo[2] && $month{$foo[2]} )
    {
	if($foo[3]=~(/(.*)at(.*)/))
      { 
        @quux=split(/ at /,$foo[3]);
        $foo[3]=$quux[1].", ".$quux[0]."\033\$BG/\033(B"; 
      };
      return "$foo[3]$month{$foo[2]}$foo[1]\033\$BF|\033(B$wday{$foo[0]}"; 
    };

#
# handle two different time/date formats:  
# return "$wday, $mday $month ".($year+1900)." at $hour:$min";
# return "$wday, $mday $month ".($year+1900)." $hour:$min:$sec GMT";
#

# handle nontranslated strings which ought to be translated
# print STDERR "$_\n" or print DEBUG "not translated $_";
# but then again we might not want/need to translate all strings
  
  return $string;

  };
